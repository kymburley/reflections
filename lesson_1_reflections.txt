Comparing large files is fun and easy using the diff command 
in git bash. The command is:

diff -u <file 1> <file 2>

Make sure I am in the correct directory - the one where the
files are that I want to compare.

How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By comparing the lines with the - with the lines with the + it was easy to
    compare and to see where the error was.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    By having easy access to the entire history of a file can make it easier to
    compare what's in both files, and to back out any new "improvements" that
    broke some code.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pro of automatic committing are that you don't have to remember to run
    a commit, because it happens for you on some interval. The con is that you 
    may have too many commits where no changes occurred, thereby making it 
    very difficult, if not impossible, to go back to a previous version - if
    you can find it. A pro of manually committing is you can choose when to
    commit, so you can commit for each logical piece completed making the 
    history easier to navigate, however, this assumes that you remember to
    commit in the first place. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git allows multiple files in one commit because developers/programmers 
    routinely change different files, and it makes sense to commit the changes
    at once as part of a package. Other VCSs like Google Docs doesn't because
    all you're ever dealing with is one type of file, and those files don't 
    usually work together.

How can you use the commands git log and git diff to view the history of files?

    The git log lets you see ALL the previous version of ONE file. The git diff
    lets you compare two different versions of the same file.

How might using version control make you more confident to make changes that
could break something?

    Because without guessing I can find the correct version of the file where
    the bug occurred, through a combination of git log, git checkout, and 
    git diff. When the bug is found it can be removed.

Now that you have your workspace set up, what do you want to try using Git for?

    For saving my code for my projects and algorithm problems on FreeCodeCamp
    and other tutorials.